This paper is the final, accepted version (after peer-review) for PROFES 2013 Doctoral Symposium. Recommended citation: Daniel Graziotin, “The Dynamics of Creativity in Software Development”, 14th International Conference on ProductFocused Software Process Improvement (PROFES 2013) - Doctoral Symposium Proceedings, figshare. DOI:10.6084/m9.figshare.703568. Available: http://figshare.com/articles/The_Dynamics_of_Creativity_in_Software_Development/703568. The Dynamics of Creativity in Software Development* Daniel Graziotin Free University of Bozen-Bolzano daniel.graziotin@unibz.it Abstract. Software is primarily developed for people by people and human factors must be studied in all software engineering phases. Creativity is the source to improvise solutions to problems for dominating complex systems such as software development. However, there is a lack of knowledge in what creativity is in software development and what its dynamics are. This study describes the current state of the research plan towards a theory on creativity in software development. More specifically, it (1) states the motivation for studying creativity in software development under a multidisciplinary view; it (2) provides a first review of the literature identifying the shortcomings in the field; it (3) proposes a research design, which includes rarely employed methods in software engineering. To understand creativity in software development will provide a better knowledge of the software construction process and how individuals intellectually contribute to the creation of better, innovative products. 1 Introduction As software is primarily developed by people for people, it is necessary to study human and social factors in all software engineering phases [6]. The advocates of Agile software movement emphasize the importance of people, to the point that ‘People trump Process’ [5]. Software development activities are perceived as creative and autonomous [18]. Software developers prefer to work on those development activities which are perceived as creative [14]. Creativity is crucial in software development as it is the source to solve complex problems and innovate [6]. Agile practitioners claim to rely on the creative talent of people to improvise solutions for complex software development problems [5, 15]. Traditional and formal processes rely instead on predictability and rationality in order to dominate systems. However, the environment in which software development happens is all but simple and predictable [10]. Too much change occurs while software is being developed and agility is required to adapt and respond to such changes [29]. Especially in small software organizations, environmental turbulence requires creativity to make sense of the changing environment [10]. * Supervisor: prof. Pekka Abrahamsson, pekka.abrahamsson@unibz.it Although the importance of creativity has been investigated in few publications [6, 14], the term appears to be misused in the literature. Little research has been done to explain what creativity is in software development and how this phenomenon arises. This might be explained by the insufficient clarity of the definitions of creativity and how to explore it [24]. The available definitions for creativity seem not to fit for many software development activities and artifacts. There is also a lack of an open-minded, multidisciplinary view when trying to explain complex objects such as creativity in a complex context like software development. It has been recognized that software development is an intellectual and social activity [10] and it is carried out by cognitive processing activities [13, 17]. Creativity is cognitive and it is influenced by cognitive processes like emotions and mood [1, 8]. Much Psychology literature can be mined on this topic. However, there is the need to understand what creativity is in software development from a Software Engineering research perspective. It is still necessary to exploit specialized disciplines like Psychology when studying the dynamics of creativity in software development, according to this author, because software development is a non-ordinary and complex system. For example, a client library software to access a remote API might have been automatically generated by another software, written during a “creative moment” after the observation of the patterns in repetitive programming activities. What and where would be creativity here? What caused such creative software development moment? The purpose of this study is to explore the dynamics of creativity in software development activities and to explain what creativity is for such activities. By dynamics, this author means “the forces or properties that stimulate growth, development, or change of creativity in software development”. There is the need to understand what creativity in software development activities is; what provokes creativity while developing software; how to influence the creativity of software engineers. The outcome of this author’s PhD will be an evidence-based theory on creativity in software development. To understand creativity in software development will allow a better knowledge of the software construction process and how individuals intellectually contribute to the creation of better, innovative software products. This paper summarizes the first four months of PhD of the author. Therefore, it concentrates on the literature review, the research questions and the proposed research methodology. 2 Literature Review This section describes an ongoing literature review of creativity in Software Engineering research and Psychology. Although hundreds of definitions for creativity exist [24], most of them are related to the generation of products (ideas, solutions, artifacts) presenting (1) novelty and (2) usefulness [1, 8, 24]. Definitions tied to products, however, present issues in software development. Creativity is believed to be beneficial and required in software development for decades. Brooks [2] considers the importance of creativity in The Mythical Man-Month. Programming activity is usually fun because it enables creativity, although some activities such as bug fixing might not be creative at all [2, pp. 8-9]. Programmers are happy and optimist when they perceive their activities as creative. Gu and Tong [14] report an exploratory research on creativity issues in software development. Students of a software architecture course implemented a software project. They filled a survey, which asked them to evaluate their work in terms of perceived creative time, perceived discipline-based time, and “other” time. From the results, the following hypotheses were formulated: (1) in software development, there is most creative work in the implementation phase and least creative work in the post-mortem analysis phase; (2) UML documentation promotes students to do more creative work in requirement specification and architecture design phases; (3) more creative work does neither accelerate nor decelerate development speed compared with discipline-based work; (4) developers prefer development phases including more creative work than discipline-based work. Crawford et al. [6] report that previous research on creativity in software development primarily focused on requirement engineering and that the techniques to foster creativity are rarely investigated (brainstorming being a notable exception). They offer a linkage between basic types of creative thinking and requirements engineering. Then, the authors compare already proposed roles in a creative team with roles in eXtreme Programming. Finally, a linkage between eXtreme Programming activities and the creative process activities are given. No empirical research is reported. Several proposals to foster creativity in software requirements exist – e.g., [20, 21, 23]. Although some authors conducted empirical research to evaluate techniques and tools, the evaluation is always in terms of the generated product, i.e., requirements. There is an explanation for this. In software engineering, requirements are arguably the artifacts, which resemble an idea more than anything else. Thus, the creativity of requirements can be easily understood and assessed as self-perceived creativity, or as defined in Psychology research. Creativity has been studied in Psychology and Cognitive Science since more than 60 years ago and immediately acknowledged as being necessary for technology [26]. When dealing with creative performance, it is useful to distinguish between creative product, creative process [8], creative person and creative press (i.e., the relationship between humans and environment) [25]. In research, however, the outcomes of a creative performance often conceptualize the performance itself, in terms of novelty and value [8]. Additionally, affective states (mood, emotions, feelings) are believed to be “one of the most widely studied and least disputed predictors of creativity” [1]. In software development, explaining a creative performance by judging the creativity of a product might work for initial ideas and requirements, as well for the final software product. Alas, the creativity of intermediary products such as diagrams, architectures, and source-code seems difficult to be evaluated, if not pointless. However, it is currently unexplained how a creative performance produces such products and how this performance is structured. Improvisation seems to play a role in the creativity of software developers and organizations in general. Improvisation is a “process of making sense of incoming working events and developing ad-hoc solutions”, where “thinking and action seem to occur simultaneously” [4, pp. 369-371]. Despite improvisation is disregarded in the design of information systems and software processes in general, it is critical for software firms [3, 10]. Procedures and methods do not provide the implementation details of actions. Individuals interpret the methods according to human existence and experience [3]. Therefore, creativity is necessary to make sense of the ever-changing environment of software development [10]. Additionally, according to Ciborra, the act of improvisation is a mood [4, pp. 162-165] and the affective states enable the “mattering” of things. It has been argued that the ability to sense moods and emotions of software developers might be necessary for the success of an Information Technology company [9]. A linkage between improvisation, moods and creativity is likely and should be investigated in software development. The research questions of this PhD are at an early stage. The following research questions have been proposed: (1) Is there a misconception of creativity in the context of software development? (2) What are the key components of creativity in software development at the individual, team, and organizational levels? (3) What is the relationship between creativity, moods, and improvisation in software development? 3 Proposed Research Methodology Although Software Engineering is commonly treated as a scientific discipline, there have been criticisms on this approach. Software Engineering might be studied as a social discipline [4, 27]. According to this author, the truth lies somewhere in between and a pragmatic worldview is required. Pragmatism does not commit to any system of beliefs [7]. The best methods will be taken on a case basis, under a “whatever works at the time” philosophy (pp. 6-7 in [11]). This author’s PhD study is explorative in nature. The aim is to generate a theory from empirical evidence. There is the need to (1) define the steps of the theory building process, to (2) select a strategy to analyze the data, to (3) represent the theory in a meaningful way and to (4) choose research methods, in the order of importance to this study. Theory building process Eisenhardt [12] proposes a sense-making process in theory building. The process of building theory is composed by eight main activities: the definition of the research questions, the selection of the cases, the crafting of the instruments and the protocols, the field entrance, the data analysis, the hypotheses shaping, the literature enfolding, and the closure reaching. These phases dictate the status of this PhD’s research methodology. Data Analysis Methodology As the aim of this PhD research is to generate insights, patterns, and theory from individuals’ experiences, a strategy to gather and analyze the data like grounded theory [28] responds to such needs [19]. It is indicated to study human behavior in an iterative, explicit and systematic process [11]. Montoni and Rocha [22] employed it in Software Process Improvement studies [22]. They outline the phases of grounded theory research in six steps. First, the (1) context and the scope of the study are defined. Then, (2) data collection is defined and performed through dif- ferent methods – e.g., surveys, literature reviews, and (semi) structured interviews. After the data is collected, three different types of coding systems are required: open coding (3) – i.e., conceptualize and categorize the data; axial coding (4) – i.e., analysis of the relationships of the categories; selective coding (5) – i.e., the identification of the central category of the theory. The last phase of grounded theory research is to (6) apply audit techniques to ensure validity. Theory representation Sjøberg et al. [16] suggest a framework for describing Software Engineering theories. A theory description should provide (1) its basic elements, or constructs, the (2) propositions describing the relationships of the constructs, the (3) explanations for the relationships, and the (4) scope of the theory. The framework provides the representations of the theory parts, using textual tables and a UML-like language with four archetype classes (Actor, Technology, Activity, and Software Systems). Research methods As the what and the why of the topics under investigation are still not understood, qualitative studies will be conducted in the first part of the research activities. Unstructured interviews of software developers, managers, and creativity gurus will be carried out. Direct observations will extend the data from the interviews. A systematic mapping study on creativity in software development will enable further insights and enhance the validity of the theory that will emerge from the data. Sjøberg et al. [16] suggest that a Software Engineering theory should be tested through empirical research. Therefore, Eisenhardt [12] process will be extended with a theory testing phase, employing cross-case analysis. Quantitative studies will be conducted. Surveys and experiments will provide quantitative evaluations of the relationships under study. 4 Conclusion This paper proposed a research design to build a theory of creativity in software development. Since the author is at the beginning of the PhD study, the focus was given to the motivation of this study, on the multidisciplinary literature review, the research questions, and a plan for a research design and the framework for theory building. References 1. Baas, M. et al.: A meta-analysis of 25 years of mood-creativity research: hedonic tone, activation, or regulatory focus? Psychological Bulletin. 134, 6, 779–806 (2008). 2. Brooks, F.P.: The Mythical Man-Month. Addison-Wesley, Philippines (1975). 3. Ciborra, C.: Improvisation and information technology in organizations. ICIS 1996. p. 26 (1996). 4. Ciborra, C.: The Labyrinths of Information: Challenging the Wisdom of Systems. Oxford University Press, USA (2004). 5. Cockburn, A., Highsmith, J.: Agile software development, the people factor. Computer, IEEE. 34, 11, 131–133 (2001). 6. Crawford, B. et al.: Agile software teams must be creatives. 5th International Workshop on Co-operative and Human Aspects of Software Engineering. pp. 20–26 IEEE (2012). 7. Creswell, J.W.: Research design: qualitative, quantitative, and mixed method approaches. Sage Publications, Thousand Oaks, California (2009). 8. Davis, M.: Understanding the relationship between mood and creativity: A meta-analysis. Organizational Behavior and Human Decision Processes. 108, 1, 25–38 (2009). 9. Denning, P.J.: Moods. Communications of the ACM. 55, 12, 33 (2012). 10. Dyba, T.: Improvisation in small software organizations. Software, IEEE. September/October, 82–87 (2000). 11. Easterbrook, S. et al.: Selecting empirical methods for software engineering research. Guide to Advanced Empirical Software Engineering. 285–311 (2008). 12. Eisenhardt, K.: Building theories from case study research. Academy of management review. 14, 4, 532–550 (1989). 13. Fischer, G.: Cognitive View of Reuse and Redesign. IEEE Software. 4, 4, 60–72 (1987). 14. Gu, M., Tong, X.: Towards Hypotheses on Creativity in Software Development. 5th International Conference on Product Focused Software Process Improvement (PROFES). pp. 47–61 Springer Verlag (2004). 15. Highsmith, J., Cockburn, A.: Agile software development: the business of innovation. Computer, IEEE. 34, 9, 120–127 (2001). 16. Jorgensen, M., Sjoberg, D.: Generalization and theory-building in software engineering research. 1, 1–7 (2004). 17. Khan, I.A. et al.: Do moods affect programmers’ debug performance? Cognition, Technology & Work. 13, 4, 245–258 (2010). 18. Knobelsdorf, M., Romeike, R.: Creativity as a pathway to computer science. ACM SIGCSE Bulletin. 40, 3, 286 (2008). 19. Langley, A.: Strategies for Theorizing from Process Data. Academy of Management Review. 24, 4, 691 (1999). 20. Maiden, N. et al.: Provoking Creativity: Imagine What Your Requirements Could Be Like. IEEE Software. 21, 05, 68–75 (2004). 21. Maiden, N., Hollis, B.: Extending Agile Processes with Creativity Techniques. IEEE Software. 1–1 (2012). 22. Montoni, M.A., Rocha, A.R.: Applying Grounded Theory to Understand Software Process Improvement Implementation. 7th International Conference on the Quality of Information and Communications Technology. pp. 25–34 IEEE (2010). 23. Obrenovic, Z. et al.: Stimulating creativity through opportunistic software development. Software, IEEE. November / December, 64–70 (2008). 24. Piffer, D.: Can creativity be measured? An attempt to clarify the notion of creativity and general directions for future research. Thinking Skills and Creativity. 7, 3, 258–264 (2012). 25. Rhodes, M.: An Analysis of Creativity. The Phi Delta Kappan. 42, 7, 305–310 (1961). 26. Simonton, D.: Creativity: Cognitive, personal, developmental, and social aspects. American Psychologist. 55, 1, 151–158 (2000). 27. Sjøberg, D. et al.: Building theories in software engineering. Guide to Advanced Empirical Software Engineering. 1, 1, 312–336 (2008). 28. Strauss, A.L., Corbin, J.M.: Basics of Qualitative Research: Techniques and Procedures for Developing Grounded Theory. Sage Publications, London (2008). 29. Williams, L., Cockburn, A.: Agile Software Development: It’s about Feedback and Change. Computer, IEEE. June, 39–43 (2003). 


skip to main content
    • 
What is Creativity in Software Engineering?
 20 January 2021  |   programming
Last month, our paper entitled “Exploring the Role of Creativity in Software Engineering” got accepted for publication in the proceedings of the 43nd International Conference on Software Engineering: Software Engineering in Society (ICSE-SEIS). Read the pre-print paper here. In this article, I’d like to summarize and rephrase our findings, since academic prose can be a bit… well… you know.

Addendum, 28 May: ICSE was this week, and the organizers did their best to make the virtual event as pleasant as possible. We ended up winning the best presentation award for the SEIS track! I’m sure it was the drawing and not my presentation skills that did the trick.

Why the sudden interest in creativity?
Good question. In my PhD work, I try to identify - and later on, hopefully amplify - so-called non-technical skills that are needed to succeed as a software engineer. First of all, software engineering is my field of expertise: read the about me page if you didn’t know that yet. Secondly, I wondered what else besides the technical mumbo-jumbo one really has to master in order to be a proper developer. This goes beyond programming languages, frameworks, typing and productivity knowledge.
In the previous years, I’ve worked on:
    1. Trying to come up with a list of skills that are important, according to experts in the field;
    2. Trying to come up with a list of skills currently taught in higher education;
    3. Trying to match these and narrow down the results to reveal the biggest skill gap.
Guess what. Creativity was in the top 3. But the more papers I read about the topic (of which surprisingly little specifically for software development!), and the more people I talked to, the less easily “creativity” could be defined. Hence the effort to facilitate a focus group, where 33 experts in 4 groups talked about their personal experience on the subject at hand.
I wrote about programming as a creative cognitive process before, and tried to link the different existing frameworks out there. Most were too theoretical or contained too little context to be able to relate to practical software development. This time, we wanted to validate our thoughts by involving others.
Dimensions of Creative Problem Solving
After plowing through 399 lovely minutes of discussion, applying the needed qualitative tactics and methods, we came up with 7 main themes that, according to our interviewees, define creativity in the world of (agile/enterprise) software development. The paper contains much more details surrounding these, I merely try to summarize in this blog post.


A mind map of the 7 identified themes of creativity in software engineering.

We did our best to be as specific as possible, using the wording of the participants as much as possible, but generalizations of course are bound to be made at some point in time. Also, instead of going for a vague term like “creativity”, we always talked in context of a programming problem. That is why the center states “creative problem solving” rather than “creativity”. Someone said:
Creativity simply arises when you are solving a problem.
Existing literature has proven before that creativity is context-dependent. Whether or not it’s also domain-dependent is still an on-going debate.
1. Creative Techniques
Let’s start with obvious ones: when talking about creativity, someone is bound to mention “brainstorming” or “combining ideas”. Yet, if you don’t know about these (practical) techniques, you’ll have a harder time solving the problem at hand. For instance, until recently, I never heard about non-linear note-taking, until now. It has completely changed the way I work!
The most interesting remark came from someone who said:
Creativity is the brew of different inputs.
Because of this, he actively sought out new information - anything that could help him in making the connection with the current problem. Thus, the more you know (and can remember!), the more you can link. And the more you can link, the more you can cook up a solution! That is why this term is colored both blue and purple.
More interesting common practices that were mentioned:
    • Peeling the onion by keeping on asking “why?";
    • Rubber ducking;
    • Switching gears: zooming out or zooming in;
    • Seeking out edge cases (hopefully in combination with unit tests);
    • …
Things like shower thoughts reminded me and participants of Andy Hunt’s Pragmatic Thinking & Learning, one of the best books any developer can read.
2. Technical Knowledge
If creativity is the brew of different inputs, then you better be inputting a lot! Without any base knowledge of the problem at hand (syntax, alternative previous solutions, …), your creative mind will probably never even bootstrap. The obvious link to another popular non-technical skill, continuous learning (or lifelong learning) can be made here.
3. Communication
Many people falsely assume that creativity is a very personal matter: the lone genius creating away of having awesome thought after thought. Yet it is usual within the Camerata where the magic happens: the group of like-minded people that share ideas, in a liquid network, as in Steven Johnson’s Where Good Ideas Come From.
Rubber ducking is all good, but it’s better to do it with a colleague: the sensible or insensible response might trigger a thought in your brain and end up helping your creative process. Rubber ducks don’t talk back, as far as I know.
Communicating might also help with motivation - which in turn helps you being more creative (extrinsic motivation only goes that far). One participant said:
Doing something without feedback is just too non-committal.
4. Constraints
Besides of the exchange of ideas in the communication dimension, working with a fast feedback loop and doing stuff client-oriented introduces constraints. Constraints are the things of the Devil - the things we as developers usually curse at: time too short, nagging client, stupid bug report, and so forth. Yet, in reality, the sweet spot of creativity is having enough constraints to keep it challenging. Biskjaer talks about How task constraints affect inspiration search strategies - and that is exactly what happens with creative software developers.
Next time your team members complain about yet another constraint, tell them they’re being more creative that way.
5. Critical Thinking
Criticizing others' ideas (“That ain’t gonna work!") is easy. Coming up with good alternatives yourself is not. Separating the wheat from the chaff, in terms of conceptual ideas you and your team has on this one programming problem, is very important. My ex-colleagues neatly summarized this as: “don’t ASS-ume, you make an ass out of u and me”. This was said quite often, for example when we assumed the NullPointerException was because of x, without digging deeper first.
Of course, the cause turned out to be a combination of y and z.
6. Curiosity
Closely related to motivation. One participant said he had a lot of respect for creative solutions, also beyond the context of software engineering. Admiring something creative because of the creative aspects drives your own curiosity, pushing you to look for alternatives and niche paths you might never have looked at before. In short: get out of your comfort zone! Work cross-team, pick up that other programming language, read others' blogs (thanks!) - even if it makes you feel uncomfortable. That feeling is the feeling that you’re learning.
Does this mean we always have to be curious? Unlikely. Use your critical thinking skills to decide! Participants emphasize the right combination between creativity and critical thinking, taking into account the context and constraints of the problem:
Creativity is the means, not the goal.
7. Creative State of Mind
Before being creative, you first have to be allowed to be creative: companies should also and actively support this! Setting the right scene to allow the flow of thought is a requirement of good creative problem solving. This means your environment should allow for freedom and flexibility.
This is where “the magic” happens
Funnily enough, creative thinking does not seem to happen exclusively on the workplace, behind your desk. Someone said ideas come to mind when standing in front of a traffic light, while others jot stuff down after a shower. I loved this statement:
When I’m at work, all I have to do is type out the solution in my head.
Of course, 80% of the work has been done before getting to work (or on the previous days/weeks at work). I remember our boss being very angry because we were letting off steam by playing cards at 14h30 - just finishing up a game we had to interrupt. What he didn’t see was our invisible collectible creative problem solving effort (and probably also sweat) we put in earlier. Like the guy who said I just type out stuff when I’m at work. Managers like busy-work, but most if it is distinctively not creative: that part has already been done!
Future Work
There are many more variables involving creativity and sparking that creative flow (how to assess it, what are some limitations, what are motivations to be creative, …). We’re planning on using the above dimensions to create a small survey in order to test how creatively students approach a programming project. I think we can safely presume that there is still a lot of unexplored ground to cover, and I love that - it means we can contribute something useful!
 Recently, at one of the local meetups, I met someone who introduced themselves by adding the following to the usual introductory sentence (name, etc.),
“I started my career in engineering, as a developer. But that’s too mechanical and not that creative, so I moved into user experience design.”
Maybe he was just trying to be friendly by mentioning that he has been a developer himself. But the reason he gave for making a transition into UX design didn’t make any sense to me. I was like (thinking) — my friend, you don’t get to judge my profession because you didn’t get it.
Some people make career shifts from software engineering mostly because of lack of interest. It’s absolutely fine if you don’t like programming. Not everybody enjoys it. On the other hand, calling it too mechanical and less creative means you never understood the basics in the first place.
“You might not think that programmers are artists, but programming is an extremely creative profession. It’s logic-based creativity.”
— John Romero
There is a lot of creativity in software development and it’s related to how we approach solving the problems. Sometimes we just try to find the quickest possible solution. That’s what makes things more mechanical and less creative. Instead, when we take a step back and analyse the problem before trying to solve it, things start to become interesting.
“Falling in love with code means falling in love with problem solving and being a part of a forever ongoing conversation.”
— Kathryn Barrett
Let’s take an example of sorting algorithms. There are so many of them. If things were really mechanical in software engineering, we would be satisfied with just one. What’s the need for so many solutions to solve the same problem of sorting a collection? Well, because the same problem behaves differently in different conditions, doesn’t it? And what makes things creative is when we try to find the best solution considering the conditions that surround the problem.
Computers are machines and programs are just instructions to run them. Creativity comes into picture when we try to get the best out of these machines through a well-thought solution. A creative programmer tries to find the most optimal set of instructions for the computer. He tries to find answers to questions which can help improve the instruction set. Some of the example questions can be the following.
    • When should a struct take precedence over a class?
    • When does a character array makes more sense than a string?
    • When should a hash table be used in place of a dictionary?
    • And so on…
When you start looking at programming this way, things actually become a lot more creative.
“Everyday life is like programming, I guess. If you love something you can put beauty into it.”
— Donald Knuth
Another aspect of software engineering that makes it not mechanical is the pace at which things change in this profession. There is always something new to try and learn. And the more amazing thing is that there are always new problems to solve because of new use-cases coming up every day. If you don’t continuously learn and keep using the same skills, things are bound to become mechanical and boring.
There is a difference between the code that just works and the code that works well and should be shipped. This gap is the sweet spot where creativity comes into the picture.
Every professional software developer writes code that works, at least in some way. But there is a difference between the code that just works and the code that works well and should be shipped. This gap is the sweet spot where creativity comes into the picture. It’s up to you how you cover this gap or don’t. If you take interest in making your code better (extensible, performant, bug-free and readable), you are creative and have covered this gap well. If you can’t, at least don’t shy away by calling software engineering not creative. Believe me, for some people, beautifully written code is a thing to swear by.


Search Medium
Write
Sign up

Sign In



You have 2 free member-only stories left this month. Sign up for Medium and get an extra one.


Member-only story

Creativity and software development
Che Kulhan
Dev Genius
Che Kulhan

·
Follow

Published in
Dev Genius

·
8 min read
·
Nov 19, 2022
50





Is software development for the creative? What skills and characteristics are considered to be a creative software engineer? As a programmer, how can I improve my creativity? As a leader, how can we encourage and instil creativity in software development teams?

I was recently chatting to a colleague who had just carried out an online presentation on creativity and software development. This presentation got me thinking about the skills and characteristics necessary to be a considered creative, in the world of coding. I personally have made a conscious effort over the years to improve my own creativity skills (and assist others at the same time by including creativity as part of the soft skills evaluated in software development education). In addition, I have been reading many books such as Creative Confidence: Unleashing the Creative Potential Within Us All by Tom and David Kelley and making a conscious effort to apply these methods, tools and techniques in my everyday programming practices. While there is not a lot of research and studies on the topic of creativity specific to software development sector, this article attempts to answer the above questions based on recent research carried out by Groeneveld et al. in their paper “Exploring the Role of Creativity in Software Engineering” in 2021.

Groeneveld et al. (2021) identified 7 categories, necessary for creativity to take place or to improve it. These categories are depicted below in a mind map:


Image courtesy of https://brainbaking.com/post/2021/01/what-is-creativity-in-software-engineering/
Technical knowledge
A firm grasp of the basic programming commands and structures is required before creativity can take place.

Think of the last time you started to learn a new framework or programming language. Were you able to develop creative solutions before having a basic grasp of the commands? I got involved in PySpark on a big data platform a few years ago. At the very beginning, I was focused on learning the basics of the language, comparing and contrasting it to experiences I previously had with Pandas, SQL and NoSQL. Although during this “learning” phase, many creative ideas crossed my mind, I was not able to implement them for a couple of months, after I had mastered the nuances of the language.

Communication
Open-ended questions were cited by Groeneveld as triggering that “spark” in creative persons. Personally, I like to add to this technique all the opportunities we have as software developers to be involved in communicative moments, including code-reviews, pair-programming, sprint reviews and general feedback. These moments present opportunities to learn and improve a software developer’s technical and soft skills, including creativity.

Constraints
Groeneveld compare legacy code to working on new projects. Surprisingly, some participants in the focus groups for their study mentioned that legacy projects provided more opportunities to develop creative solutions, as the s/w engineer has to battle many limitations and constraints, requiring more creative solutions. Think of memory limitations, limited data structures, less learning resources available, etc, just to name a few.

When working in highly regulated industries such as banking and finance, s/w developers are also constrained by the applications available, security, industry regulations, etc. A developer who needs a resource cannot just execute a RESTful call to extract data from an online API, as it would result in a security and policy breach. These types of constraints require out-of-the-box thinking.

What about when s/w engineers are working on bugs or defects — Would you consider this to be creative or provide opportunities to be creative? Throughout our careers, we don’t always have the luxury to work on greenfield projects, where we can write code from scratch, and end up spending our time or sprints on fixing defects, often created by other developers. Creativity in these bug-fixing contexts is obviously constrained, nevertheless these moments allow us to problem solve and look for creative solutions.

Technical debt, a software term coined by Ward Cunningham, one of the authors of the Agile Manifesto, prioritises speedy delivery over perfect code. Code constraints inherited by developers, allow for code refactoring, hence providing opportunities to further develop creativity. This could include implementing new code constructs, such as some of the new Javascript features such as arrow functions and array loops.

# arrow functions in Javascript
(a) => a + 100;
const scores = [22, 54, 76, 92, 43, 33];

scores.forEach((score) => {
        console.log(score);
});
I recently had an opportunity to refactor technical debt using list comprehension in Python. Here is a simple example:

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x for x in fruits if "a" in x]
print(newlist)
State of Mind
Safe, flexible and interactive environments foster creativity. A lot of work has recently been done on psychological safety. In Google’s quest to build the perfect team, they found out that:

“In a team with high psychological safety, teammates feel safe to take risks around their team members.”

In addition to the environmental variables, Google focus on building 3 core creative abilities: Empathy (know the user), Expansive thinking (10x or moonshot ideas) and Experimentation (building a prototype to test out ideas).


Image courtesy of https://rework.withgoogle.com/guides/design-thinking/steps/run-a-CSI-Lab-on-design-thinking/
What time of the day are you most creative? Where are you most inspired? With whom do you interact with when you have an inspirational moment? These are the types of questions that focus on our environment — time, spaces, colleagues, sense of well-being and productivity tools that enhance our creativity.

Curiosity
“People will be most creative when they feel motivated primarily by the interest, satisfaction, and challenge of the work itself — not by external pressures.”

(Teresa Amabile, ‘How to Kill Creativity’)

Leaders do have at their disposition a great tool to intrinsically motivate employees called transformational leadership. Although curiosity can be developed by each individual, it is also up to leaders to assist in the transformation of individuals to achieve a heightened state of curiosity (on purpose, I’m avoiding extrinsic factors in this article, however they do play a part).

Another way to dissect curiosity is to measure your willingness to get out of your comfort zone. How often do you turn to the “already-done” when solving a problem, rather than looking at new, different ways.

For example, in a recent big data project a colleague of mine worked on, all the queries were written in standard SQL. Making the most of PySpark’s features, she got out of her comfort zone and started filtering the data using Pyspark’s programming API.

(df
    .select("id","region", "current_act", "mortgage")
    .filter((col("age")> 50))
    .show()
)
When was the last time you learnt a new programming language or framework? I recently played around with an esoteric language called LOLCODE. Obviously, it isn’t a language which I could use in my professional career (have you ever seen a job opening for a LOLCODE programmer?), nevertheless it did allow me to think and try something different — in fact, I created a few demo projects to compare LOLCODE with Python.


LOLCODE to Python, in my free time
Have you tried executing SQL commands on a cloud database? Have you looked for opportunities to use a notebook, such as Jupyter or Google’s Colab? Have you developed online, in real-time and simultaneously with a colleague using remote applications such as Visual Studio’s remote extensions? There are so many opportunities for s/w engineers to get out of our comfort zones.

Creative Techniques
Tools and techniques are methods that help us foster creativity, both individually and as a team. These traditionally include brainstorming, 6 thinking hats, nominal group technique, mind-mapping and Delphi technique, to name a few.

Online tools nowadays improve productivity and collaboration when carrying out creativity techniques. Think of a remote team, trying to come up with ideas for new features of a website. By collaborating using an online tool during a video conference, they are able to work as a team and be creative!


Image courtest of https://www.pinterest.es/pin/218283913173017192/
Although not directly related to software development, some of my favourite books on creativity processes and techniques include Creative Confidence: Unleashing the Creative Potential Within Us All by Tom and David Kelley, The Right-Brain Workout by Alex Wadelton and Russel Howcroft, and of course, The Design Thinking Toolbox by Michael Lewrick. These books can be read and re-read, and I’d suggest keeping them on a bookshelf in your living room, for easy access.


Image courtesy of https://www.creativeconfidence.com/
Critical thinking
I like the comparison of critical thinking and creativity expostulated by James Taylor:

Critical thinking is the ability to clearly and logically consider information that is presented to us. Creative thinking is about generating new, novel, or useful ideas.

Effectively, critical thinking allows you to view problems from different perspectives, using techniques such as observation, analysis, reflection and evaluation, but it doesn’t allow you to come up with new, innovative solutions.

How many times have you immediately started coding as soon as you have received an agile story or requirement to work on? I know, I have! As software developers, critical thinking allows us to evaluate requirements before jumping into the coding. This approach benefits our creativity by providing time to gather incomplete requirements, refine the story with conversations from the Product Owner, carry out searches on the internet for possible solutions already documented on the task, brainstorm, etc…

Conclusion
The mind map created by Groeneveld et al. provides us with a framework of 7 categories, specific to software developers, to facilitate, instil and encourage creative work. This framework can be used by individual programmers, teams and even leadership to improve and foster creativity in the exciting world of software development.



Subscribe
Sign In










Diversity
Latest
Magazine
Ascend
Topics
Podcasts
Video
Store
The Big Idea
Data & Visuals
Case Selections

Digital Transformation
When Should Your Company Develop Its Own Software?

    • 		by Robert Sher
December 07, 2021

HBR Staff/Mohamad Faizal Bin Ramli/Mensent Photography/Getty Images
Summary.   
Leveraging homegrown software to bring innovation to your market or to create more efficient operations can be a strong growth driver. But the buy-it vs. build-it decision is a critical one. If buying the software you need just isn’t possible, building it may make sense. But...more
    • 		Tweet 
    • 		Post 
    • 		Share 
    • 		Save 
    • 		Buy Copies 
    • 		Print 
Every company needs and uses software, and some is a significant driver of business success. But as small companies grow to midsize, software performance gaps can emerge. Finding new software solutions can fix problems and inefficiencies and help teams develop innovative products and services. But midsize company CEOs often face a difficult choice: whether to upgrade through a vendor or develop (a.k.a. “roll”) their own code.
It’s widely understood that software upgrades are always expensive and often disruptive. Sometimes they fail completely, or they don’t deliver on their original promise. That means little or no return on money spent. But sometimes, there’s simply no off-the-shelf software available to address a business’s unique problem.
For small companies, it’s usually easier (and almost always cheaper) to do manual workarounds when their operating software isn’t up to the task. But midsize companies can lose a great deal of money and stunt their growth due to the inefficiencies that inevitably spring from such workarounds. And those tortured manual processes can prevent companies from seizing opportunities in a timely manner. For those companies, custom coding is a viable option. (Large businesses with deep pockets can build software development teams and often have the talent on board to do so.)
Most midsize companies have a “super user” who’s good at helping everyone with the capabilities already built into their software (like report writers, dashboards, etc.). And most modern enterprise resource planning (ERP) software has layers that allow for customization — often a layer where value-added resellers (VARs) can make changes and a customer layer for customer customizations. If a midsize company can get what it needs from that, fantastic. But what if it can’t?
Many midsize companies get stuck trying to decide whether to buy new software or attempt to write their own code, even if that just means connecting disparate systems. Others try to outsource the problem to a software firm. While outsourcing code creation may be part of a solution, doing so successfully requires rigorous project management — a capability not all midsize businesses have.
Insight Center Collection
Taking on Digital Transformation
Moving your company forward in the wake of the pandemic.
Meanwhile, the clock is always ticking. Efficiencies that could be realized with software aren’t retrieved, eating away at margins. Market opportunities are lost to competitors. How can midsize business leaders determine when it makes sense to build their own software?
When to Roll Your Own Code
It’s inefficient to develop custom programs for core business functions like accounting, payroll, sales tax, inventory, and customer relationship management (CRM), and so many options are readily available. But if there’s no software that does what you need it to do, you may have no choice but to roll your own, especially if there’s a high-value opportunity to seize or a significant efficiency to gain. (Creating your own code is only worthwhile if there’s a big payoff; without a strong ROI, forget about it.)
For example, in 2007, BF&S Manufacturing was gaining steam as a contract manufacturer for complex, low-volume — but critical — components for aerospace, military, medical, and industrial verticals. Its customers wanted to oversee the work, but BF&S was based in Mexico, and many of its customers didn’t want to invest the time and money to travel and stay there.
BF&S depended on a close relationship with its customers, often turning to their engineers to solve production problems. But distance and a border were making that ever more difficult. Screen-sharing and cameras alone weren’t going to be enough for its customers, and BF&S feared losing them to more closely based manufacturers, even if those businesses charged more. BF&S needed to be able to port valuable production data from its core ERP system into a format its customers could use.
BF&S CEO Carlos Fernandez looked around but couldn’t find a solution to buy. Instead, he says, “We embarked on a software program that would provide 24/7 real-time data” on the company’s product builds. It started with their “computer guy,” as Fernandez calls him, just out of college, building a tool to track raw materials, work-in-progress, and finished goods inventories and provide visibility internally and externally.
It was completed and first used in 2010. Customers loved it. Fernandez began to grow the software development team in Mexico, supporting four facilities in the state of Sonora with a combined headcount of 500. Customers could now see video of the workstations, their products’ progress at each step, BF&S’s raw and finished goods inventories, who was working on their job, and all the product stories and specs.
This custom coding required a keen understanding of both the company’s business and its customers’ needs. Originally headed by Fernandez, the team of engineers and operations leaders now plan and manage the ongoing support and development of the tool.
Today, although Fernandez won’t claim that his company’s home-built code is a huge competitive differentiator, he believes it gives his customers want they want and what he couldn’t provide through off-the-shelf software: transparency into and a measure of control over the production of their products.
The Journey and the Costs
Rolling your own code is neither simple nor cheap. Software engineers are highly paid. In the United States, that means six-figure salaries. The costs of finding and hiring engineers often involves search firms, which charge 15% to 30% of the first year’s salary, and for the past several years, even they’ve been struggling to find good candidates. On top of sourcing costs, you must interview and assess candidates for technical skills, train and onboard new hires, and provide a digital environment for development and testing.
And then you have to manage the code development tasks, making sure they’re productive. As the development department surpasses five or six engineers, you’ll need a DevOps executive to supervise it — if programmers are undermanaged, days and weeks can be lost while productivity plummets.
And you can’t just hire developers and managers and expect the magic to happen. Engineers make what the business tells them to make. They thrive on clarity. So, you’re going to need to spend time getting your arms around your business’s opportunities and needs to be able to describe the features, functions, and options you want. That software roadmap must be completed before your engineers start coding. Fail to do all this well and on time, and you’ll have very expensive talent sitting on their hands, likely looking for other places to work.
Finally, when you develop custom code, you need to maintain it. Software breaks down all the time. Hackers continually find new attack vectors. New needs pop up and users demand modifications. Even programming languages age, so every five to 10 years, software may need to be rewritten. The costs keep coming.
However, while custom coding is challenging, it can be a pivotal factor and well worth the trouble for some companies that are innovating solutions for their customers.
Corefact (a Mastering Midsized client) is a full-service marketing services provider for the real estate and mortgage industries. In 2005, the company came up with a fresh idea. If a realtor could send a postcard to a potential client with a unique URL that would take the client to a website with their own home at its center, that could be hugely appealing, and a possible game-changer. Corefact’s customers, realtors, were excited, not only by the potential appeal to their clients, but also by all the data this kind of engagement would supply them with.
Corefact couldn’t buy software to do this — it was new. Corefact’s founder and CEO Chris Burnley had always been a technologist. Prior to Corefact, he started several technology-driven companies. Thanks to this technological competency, the company found a way to print variable data — unique URLs — on postcards and then move them on to web servers that would wait for a homeowner to type in the URL, after which a new, unique website would be created instantly. By 2006, the software was launched with a single engineer.
Today the engineering team has grown to 10, located in the U.S. and abroad. They’ve created custom code that’s not only customer facing, but that also efficiently brings together thousands of daily orders through order entry, graphics, and pre-press and automates the efficient flow of work onto presses and through finishing.
Burnley says, “Our original concept put us on a fast ramp for growth, but our ability to innovate with technology continues to propel us. Of course, the investment in engineers is huge and ongoing, but the list of opportunities is long.”
But they don’t build every piece of software they use. When it came to upgrading their ERP, they chose a standard product by Netsuite, into which they’re connecting their self-made order-handling systems. Similarly, they’ve recently dropped a self-made CRM in favor of Salesforce, keeping their development team focused on creating software they can’t buy.
The Three Competencies You Need to Roll Your Own
The examples I’ve discussed require different amounts of the following three competencies, depending on how complex your custom code requirements are:
Translating business needs into software projects. Identifying business needs — and their solutions — is a necessarily iterative process, keeping in mind the limitations of existing software, as well as your resources and available data. This is neither software development nor business management; it’s a form of engineering where one leg stands in the business and the other in a thorough understanding of how your current software systems work.
This competency could be held by one executive in a smaller midsize company, or by a small team as the organization grows. What goes in is a problem or opportunity, what comes out is a series of detailed steps to create and maintain code: exactly what data is to be used and what logic or processes should be used to produce a solution. Without all these steps, endeavoring to create custom code makes no sense.
Code development. Depending on the circumstances, a midsize business could have one programmer or a full engineering department. For example, at my prior company, we had Dave, a young warehouse employee who coded as a hobby, come upstairs now and then for small coding projects. For bigger opportunities, code development can grow into a series of engineering teams with different skills and focuses working in a complete DevOps department, led by a VP or chief technology officer.Software operations. The operations side of managing custom applications is expensive — you need to maintain the health of the custom code and make sure your processes, people, and tools are kept up to date. Elements of operations include user support/help desks, training, security risk management, bug fixing, ongoing additional customization, uptime and performance attributes, and more.
Leveraging homegrown software to bring innovation to your market or to create more efficient operations can be a strong growth driver. But the buy-it vs. build-it decision is a critical one. If buying the software you need just isn’t possible, building it may make sense. But there’s no denying that’s a difficult path, and only worth it if the upside is big. Before you build, make sure you understand the real costs to succeed over the long term, and only embark on those code-writing efforts you’re sure your business is capable of.




Readers Also Viewed These Items
    • 		 Build, Borrow, or Buy: Solving the Growth Dilemma Book Buy Now  
    • 		 The Authentic Leadership Ebook Collection: Master Your Leadership Presence Special Offer Buy Now  
Read more on Digital transformation or related topics Technology and analytics and Operations strategy
    • 		Tweet 
    • 		Post 
    • 		Share 
    • 		Save 
    • 		Buy Copies 
    • 		Print 


Recommended For You

When Low-Code/No-Code Development Works - and When It Doesn't

In the Digital Economy, Your Software Is Your Competitive Advantage

The Growing Business of Helping Customers Slow Down

PODCAST
Why Authentic Leadership Is So Hard


Partner Center






Start my subscription!

Explore HBR
    • 		The Latest
    • 		All Topics
    • 		Magazine Archive
    • 		The Big Idea
    • 		Reading Lists
    • 		Case Selections
    • 		Video
    • 		Podcasts
    • 		Webinars
    • 		Data & Visuals
    • 		My Library
    • 		Newsletters
    • 		HBR Press
    • 		HBR Ascend
HBR Store
    • 		Article Reprints
    • 		Books
    • 		Cases
    • 		Collections
    • 		Magazine Issues
    • 		HBR Guide Series
    • 		HBR 20-Minute Managers
    • 		HBR Emotional Intelligence Series
    • 		HBR Must Reads
    • 		Tools
About HBR
    • 		Contact Us
    • 		Advertise with Us
    • 		Information for Booksellers/Retailers
    • 		Masthead
    • 		Global Editions
    • 		Media Inquiries
    • 		Guidelines for Authors
    • 		HBR Analytic Services
    • 		Copyright Permissions
Manage My Account
    • 		My Library
    • 		Topic Feeds
    • 		Orders
    • 		Account Settings
    • 		Email Preferences
    • 		Account FAQ
    • 		Help Center
    • 		Contact Customer Service
Follow HBR
    • 		 Facebook
    • 		 Twitter
    • 		 LinkedIn
    • 		 Instagram
    • 		 Your Newsreader

    • 		About Us
    • 		 
    • 		Careers
    • 		 
    • 		Privacy Policy
    • 		 
    • 		Cookie Policy
    • 		 
    • 		Copyright Information
    • 		 
    • 		Trademark Policy

Harvard Business Publishing: 
    • Higher Education
    •  
    • Corporate Learning
    •  
    • Harvard Business Review
    •  
    • Harvard Business School
Copyright ©
2023
 
 
Harvard Business School Publishing. All rights reserved. Harvard Business Publishing is an affiliate of Harvard Business School.




